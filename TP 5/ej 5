from queue import Queue
class BinaryTree:
    

    class __Node:
        def __init__(self, value, left=None, right=None, other_value=None):
            self.value = value
            self.left = left
            self.right = right
            self.other_value = other_value
            self.height = 0

    def __init__(self):
        self.root = None

    def height(self, root):
        if root is None:
            return -1
        else:
            return root.height

    def update_height(self, root):
        if root is not None:
            left_height = self.height(root.left)
            right_height = self.height(root.right)
            root.height = max(left_height, right_height) + 1

    def simple_rotation(self, root, control):
        if control:
            aux = root.left
            root.left = aux.right
            aux.right = root
        else:
            aux = root.right
            root.right = aux.left
            aux.left = root
        self.update_height(root)
        self.update_height(aux)
        root = aux
        return root

    def double_rotation(self, root, control):
        if control:
            root.left = self.simple_rotation(root.left, False)
            root = self.simple_rotation(root, True)
        else:
            root.right = self.simple_rotation(root.right, True)
            root = self.simple_rotation(root, False)
        return root

    def balancing(self, root):
        if root is not None:
            if self.height(root.left) - self.height(root.right) == 2:
                if self.height(root.left.left) >= self.height(root.left.right):
                    root = self.simple_rotation(root, True)
                else:
                    root = self.double_rotation(root, True)
            elif self.height(root.right) - self.height(root.left) == 2:
                if self.height(root.right.right) >= self.height(root.right.left):
                    root = self.simple_rotation(root, False)
                else:
                    root = self.double_rotation(root, False)
        return root

    def insert_node(self, value, other_value=None):
        def __insert(root, value, other_value=None):
            if root is None:
                return BinaryTree.__Node(value, other_value=other_value)
            elif value < root.value:
                root.left = __insert(root.left, value, other_value)
            else:
                root.right = __insert(root.right, value, other_value)
            root = self.balancing(root)
            self.update_height(root)
            return root

        self.root = __insert(self.root, value, other_value)

    def search(self, key):
        def __search(root, key):
            if root is not None:
                if root.value == key:
                    return root
                elif key < root.value:
                    return __search(root.left, key)
                else:
                    return __search(root.right, key)
        aux = None
        if self.root is not None:
            aux = __search(self.root, key)
        return aux
    #e
    def proximity_search(self, search_value):
        def __proximity_search(root, search_value):
            if root is not None:
                __proximity_search(root.left, search_value)
                if root.value.startswith(search_value):
                    print(f"Modifying {root.value} to Doctor Strange")
                    root.value = "Doctor Strange"
                __proximity_search(root.right, search_value)

        if self.root is not None:
            __proximity_search(self.root, search_value)
    #b
    def inorden_villanos(self):
        def __inorden_villanos(root):
            if root is not None:
                __inorden_villanos(root.left)
                if root.other_value.get('is_hero') is not True:
                    print(root.value)
                __inorden_villanos(root.right)

        if self.root is not None:
            __inorden_villanos(self.root)
    #c
    def inorden_superheros_start_with(self, start):
        def __inorden_superheros_start_with(root, start):
            if root is not None:
                __inorden_superheros_start_with(root.left, start)
                if root.other_value.get('is_hero') is True and root.value.startswith(start):
                    print(root.value)
                __inorden_superheros_start_with(root.right, start)

        if self.root is not None:
            __inorden_superheros_start_with(self.root, start)
    #d
    def contar_super_heroes(self):
        def __contar_super_heroes(root):
            counter = 0
            if root is not None:
                if root.other_value.get('is_hero') is True:
                    counter = 1
                counter += __contar_super_heroes(root.left)
                counter += __contar_super_heroes(root.right)
            return counter

        return __contar_super_heroes(self.root)

#f
    def inorden_superheroes_desc(self):
        def __inorden_superheroes_desc(root):
            if root is not None:
                __inorden_superheroes_desc(root.right)
                if root.other_value.get('is_hero') is True:
                    print(root.value)
                __inorden_superheroes_desc(root.left)

        if self.root is not None:
            __inorden_superheroes_desc(self.root)
    
    #funcion para recorrido por niveles
    def by_level(self):
        pendientes = Queue()
        if self.root is not None:
            pendientes.put(self.root)

        while not pendientes.empty():
            node = pendientes.get()
            print(node.value)
            if node.left is not None:
                pendientes.put(node.left)
            if node.right is not None:
                pendientes.put(node.right)

    #g
    def dividir_en_superheroes_y_villanos(self):
        heroes_tree = BinaryTree()
        villanos_tree = BinaryTree()

        def __dividir(root):
            if root is not None:
                if root.other_value.get('is_hero') is True:
                    heroes_tree.insert_node(root.value, root.other_value)
                else:
                    villanos_tree.insert_node(root.value, root.other_value)
                __dividir(root.left)
                __dividir(root.right)

        __dividir(self.root)

        return heroes_tree, villanos_tree

    #g)I
    def contar_nodos(self):
        def __contar_nodos(root):
            if root is None:
                return 0
            return 1 + __contar_nodos(root.left) + __contar_nodos(root.right)

        return __contar_nodos(self.root)

    #g)II
    def inorden(self):
        def __inorden(root):
            if root is not None:
                __inorden(root.left)
                print(root.value)
                __inorden(root.right)

        if self.root is not None:
            __inorden(self.root)


tree = BinaryTree()

tree.insert_node("Iron Man", {"is_hero": True})
tree.insert_node("Thanos", {"is_hero": False})
tree.insert_node("Captain America", {"is_hero": True})
tree.insert_node("Ultron", {"is_hero": False})
tree.insert_node("Black Panther", {"is_hero": True})
tree.insert_node("Doctor Strange", {"is_hero": True})  # Este será corregido luego

# B= Listar los villanos ordenados alfabéticamente
print("Villanos ordenados alfabéticamente:")
tree.inorden_villanos()

# C= Mostrar todos los superhéroes que empiezan con 'C'
print("\nSuperhéroes que empiezan con 'C':")
tree.inorden_superheros_start_with("C")

# D= Determinar cuántos superhéroes hay en el árbol
print("\nCantidad de superhéroes en el árbol:")
print(tree.contar_super_heroes())

# E= Modificar el nombre de Doctor Strange usando búsqueda por proximidad
print("\nCorrigiendo Doctor Strange:")
tree.proximity_search("Doctor")

print("\nF- Superheroes en orden descendente:")
tree.inorden_superheroes_desc()

heroes_tree, villanos_tree = tree.dividir_en_superheroes_y_villanos()

print("D- \nNumero de nodos en el arbol de superheroes:")
print(heroes_tree.contar_nodos())

print("G)I- \nNumero de nodos en el arbol de villanos:")
print(villanos_tree.contar_nodos())

print("G)II- \nBarrido ordenado alfabeticamente de superheroes:")
heroes_tree.inorden()

print("G)II- \nBarrido ordenado alfabeticamente de villanos:")
villanos_tree.inorden()
