from cola import Queue
from pila import Stack
from heap import HeapMin

class Graph:
    def __init__(self, dirigido=False):
        self.elements = []
        self.dirigido = dirigido

    def show_graph(self):
        print("\nNodos")
        for nodo in self.elements:
            print(nodo['value'])
            print("    Aristas")
            for arista in nodo['aristas']:
                print(f'    Destino {arista["value"]} peso: {arista["peso"]}')
        print()

    def search(self, value):
        for index, element in enumerate(self.elements):
            if element['value'] == value:
                return index

    def insert_vertice(self, value):
        nodo = {
            'value': value,
            'aristas': [],
            'visitado': False,
        }
        self.elements.append(nodo)

    def insert_arista(self, origen, destino, peso):
        pos_origen = self.search(origen)
        pos_destino = self.search(destino)
        if pos_origen is not None and pos_destino is not None:
            arista = {'value': destino, 'peso': peso}
            self.elements[pos_origen]['aristas'].append(arista)
            if not self.dirigido:
                arista = {'value': origen, 'peso': peso}
                self.elements[pos_destino]['aristas'].append(arista)

    def mark_as_not_visited(self):
        for nodo in self.elements:
            nodo['visitado'] = False

    def kruskal(self):
        def buscar_en_bosque(bosque, buscado):
            for index, arbol in enumerate(bosque):
                if buscado in arbol:
                    return index

        bosque = []
        aristas = HeapMin()
        for nodo in self.elements:
            bosque.append([nodo['value']])
            for arista in nodo['aristas']:
                aristas.arrive([nodo['value'], arista['value']], arista['peso'])

        arbol_expansion = []
        total_peso = 0
        while len(bosque) > 1 and len(aristas.elements) > 0:
            peso, (origen, destino) = aristas.atention()
            pos_origen = buscar_en_bosque(bosque, origen)
            pos_destino = buscar_en_bosque(bosque, destino)

            if pos_origen is not None and pos_destino is not None and pos_origen != pos_destino:
                arbol_expansion.append((origen, destino, peso))
                total_peso += peso
                bosque[pos_origen].extend(bosque.pop(pos_destino))

        print("Árbol de expansión mínima:", arbol_expansion)
        print("Total metros de cables necesarios:", total_peso)
        return total_peso

    def dijkstra(self, origen, destino):
        from math import inf
        no_visitados = HeapMin()
        distancias = {nodo['value']: inf for nodo in self.elements}
        anteriores = {nodo['value']: None for nodo in self.elements}

        pos_origen = self.search(origen)
        if pos_origen is not None:
            distancias[origen] = 0
            no_visitados.arrive((origen, self.elements[pos_origen]), 0)

        while len(no_visitados.elements) > 0:
            distancia_actual, (nodo_actual, nodo_info) = no_visitados.atention()

            if nodo_actual == destino:
                break

            for adyacente in nodo_info['aristas']:
                peso = adyacente['peso']
                nueva_distancia = distancia_actual + peso
                if nueva_distancia < distancias[adyacente['value']]:
                    distancias[adyacente['value']] = nueva_distancia
                    anteriores[adyacente['value']] = nodo_actual
                    no_visitados.arrive((adyacente['value'], self.elements[self.search(adyacente['value'])]), nueva_distancia)

        ruta = []
        nodo = destino
        while nodo is not None:
            ruta.insert(0, nodo)
            nodo = anteriores[nodo]

        if distancias[destino] < inf:
            print(f"Ruta más corta de {origen} a {destino}: {' -> '.join(ruta)}")
            print("Metros de cable necesarios:", distancias[destino])
            return distancias[destino]
        else:
            print("No hay camino entre los nodos especificados.")
            return None

# Crear el grafo con los ambientes de la casa
grafo = Graph()

# Agregar los ambientes como vértices
ambientes = ["cocina", "comedor", "cochera", "quincho", "baño 1", "baño 2", "habitación 1", "habitación 2", "sala de estar", "terraza", "patio"]
for ambiente in ambientes:
    grafo.insert_vertice(ambiente)

# Agregar aristas con pesos (distancias en metros)
grafo.insert_arista("cocina", "comedor", 5)
grafo.insert_arista("cocina", "baño 1", 7)
grafo.insert_arista("cocina", "patio", 10)
grafo.insert_arista("comedor", "sala de estar", 4)
grafo.insert_arista("comedor", "quincho", 8)
grafo.insert_arista("cochera", "quincho", 3)
grafo.insert_arista("quincho", "patio", 6)
grafo.insert_arista("baño 1", "habitación 1", 9)
grafo.insert_arista("habitación 1", "habitación 2", 2)
grafo.insert_arista("sala de estar", "terraza", 5)
grafo.insert_arista("terraza", "patio", 7)

# Mostrar el grafo
grafo.show_graph()

# Calcular el árbol de expansión mínima y total de metros de cable necesarios
grafo.kruskal()

# Determinar el camino más corto desde "habitación 1" hasta "sala de estar"
grafo.dijkstra("habitación 1", "sala de estar")
